@page "/login"
@using BookStore_UI.Contracts
@inject IAuthenticationRepository _authRepo
@inject NavigationManager navManager

<div class="card">
    <h3 class="card-title"> Log In</h3>
    @if (!response)
    {
        <div class=" alert alert-danger">
            <p> Something went wrong with login attempt</p>
        </div>
    }
    <div class="card-body">
        <EditForm Model="Model" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText id="email" class="form-control" @bind-Value="Model.EmailAddress" />
                <ValidationMessage For="@(()=>Model.EmailAddress)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="Model.Password" />
                <ValidationMessage For="@(()=>Model.Password)" />
            </div>
            <button type="submit" class="btn btn-primary btn-block">Login</button>
        </EditForm>
    </div>
</div>

@code {
    private BookStore_UI.Models.LogInModel Model = new Models.LogInModel();
    bool response = true;
    private async Task HandleLogin()
    {
        response =await _authRepo.LogIn(Model);
        if (response)
        {
            navManager.NavigateTo("/");
        }

    }
}
