@page "/authors/delete/{id}"
@attribute [Authorize(Roles = "Admin")]

@inject IAuthorRepository _authRepo
@inject NavigationManager _navManager
<h3 class="card-title"> Are you sure do you want to delete record?</h3>

<br />
<hr />
<br />
@if (isFailed)
{
    <ErrorMessage Message="Something went wrong while deleting author"></ErrorMessage>
}
@if (Model == null)
{
    <LoadingMessage Message="Loading Author Data.." />
}
else
{
    <div class="col-md-4">
        <h4>Author Details</h4>
        <table class="table table-responsive">
            <tr>
                <td>First Name</td>
                <td>@Model.FirstName</td>
            </tr>
            <tr>
                <td>Last Name</td>
                <td>@Model.LastName</td>
            </tr>
            <tr>
                <td>Biography</td>
                <td>@Model.Bio</td>
            </tr>
        </table>
        <br />
    </div>
}
<button @onclick="DeleteAuthor" class="btn btn-outline-danger">
    <span class="oi oi-delete"></span>
    Delete Author
</button>
<button @onclick="BackToList" class="btn btn-outline-secondary">
    <span class="oi oi-media-skip-backward"></span>
    Back to List
</button>
@code {
    Author Model = new Author();
    [Parameter]
    public string Id { get; set; }
    bool isFailed = false;
    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        Model = await _authRepo.Get(EndPoints.AuthorsEndPoint, id);
    }
    void BackToList()
    {
        _navManager.NavigateTo("/authors/");
    }
    async Task DeleteAuthor()
    {
        int id = Convert.ToInt32(Id);
        bool isSuccess = await _authRepo.Delete(EndPoints.AuthorsEndPoint, id);
        if (isSuccess)
        {
            BackToList();
        }
        else
        {
            isFailed = true;
        }
    }
}
