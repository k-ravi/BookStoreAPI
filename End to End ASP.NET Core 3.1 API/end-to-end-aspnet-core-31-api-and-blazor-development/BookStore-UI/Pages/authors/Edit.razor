@page "/authors/edit/{id}"
@attribute [Authorize(Roles = "Admin")]
@inject IAuthorRepository _authRepo
@inject NavigationManager _navManager
<h3 class="card-title">Edit Author</h3>
<br />
<hr />
<br />
@if (isFailed)
{
    <ErrorMessage Message="Something went wrong while editing author"></ErrorMessage>
}
@if (Model == null)
{
    <LoadingMessage Message="Loading Author Data.." />
}
else
{
    <EditForm Model="Model" OnValidSubmit="EditAuthor">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="firstname">First Name</label>
            <InputText @bind-Value="@Model.FirstName" class="form-control" id="firstname"></InputText>
        </div>
        <div class="form-group">
            <label for="lastname">Last Name</label>
            <InputText @bind-Value="@Model.LastName" class="form-control" id="lastname"></InputText>
        </div>
        <div class="form-group">
            <label for="bio">Biography</label>
            <InputText @bind-Value="@Model.Bio" class="form-control" id="bio"></InputText>
        </div>
        <button type="submit" class="btn btn-primary">
            <span class="oi oi-pencil"></span>
            Submit Changes
        </button>
        <button @onclick="BackToList" class="btn btn-outline-secondary">
            <span class="oi oi-media-skip-backward"></span>
            Back to List
        </button>
    </EditForm>
}



@code {
    Author Model = new Author();
    [Parameter]
    public string Id { get; set; }
    bool isFailed = false;
    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        Model = await _authRepo.Get(EndPoints.AuthorsEndPoint, id);
    }
    void BackToList()
    {
        _navManager.NavigateTo("/authors/");
    }
    async Task EditAuthor()
    {
        int id = Convert.ToInt32(Id);
        bool isSuccess = await _authRepo.Update(EndPoints.AuthorsEndPoint, Model, id);
        if (isSuccess)
        {
            BackToList();
        }
        else
        {
            isFailed = true;
        }
    }
}
